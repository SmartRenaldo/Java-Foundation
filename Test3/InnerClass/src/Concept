一、内部类概述

如果一个事物的内部包含另外一个事物，那么这就是一个类内部包含另一个类
例如：身体和心脏    汽车和发动机的关系

分类：
1、成员内部类
2、局部内部类（包含匿名内部类）
二、成员内部类的定义

成员内部类的定义格式：
修饰符 class 外部类名称{
      修饰符 class 内部类名称{
      //.....
     }
     //....
}
注意：内用外，随意访问；外用内，需要内部类对象。
三、成员内部类的使用

使用成员内部类的两种方法
1、在外部类的方法中使用内部类，然后main只是调用外部类的方法
2、直接方式：公式：
类名称 对象名=new 类名称（）；
【外部类名称.内部类名称 对象名=new 外部类名称（）.new 内部类名称（）；】

四、成员内部类的同名变量访问

如果出现了重名现象，那么格式是：外部类名称.this.外部类成员变量名

五、局部内部类的定义

如果一个类是定义在一个方法内部的，那么这就是一个局部内部类。
“局部”：只有当前所属的方法才能使用它，出来这个方法外面就不能用了。

定义格式
修饰符 class 外部类名称{
         修饰符 返回值类型 外部类方法名称（参数列表）{
           class 局部内部类名称{
           //...
           }
         }
       }

定义一个类的时候，权限修饰符规则
1、外部类：public/(default)，没有外边的类，不能用private/protected
2、成员内部类：public/protected/(default)/private
3、局部内部类：什么都不能写，因为它只在所在方法能用

六、局部内部类的final问题

局部内部类如果希望访问所在方法的局部变量，那么这个局部变量必须是【有效final的】
从Java8开始，只要局部变量事实不变，那么final关键字可以省略

原因：
1、new出来的对象在堆内存中。
2、局部变量是跟着方法走的，在栈内存中
3、方法运行结束后，立刻出栈，局部变量就会立刻消失
4、但是new出来的对象会在堆当中持续存在，直到垃圾回收消失

七、匿名内部类

如果接口的实现类或者是父类的子类只需要使用唯一的一次，
那么这种情况下就可以省略掉该类的定义，而改为使用【匿名内部类】

匿名内部类的定义格式
接口名称 对象名=new 接口名称（）{
    //覆盖重写接口中所有抽象方法
}；//没有名字的类

八、匿名内部类的注意事项

对格式进行解析“new 接口名称（）{.....}”
1、new代表创建对象的动作
2、接口名称就是匿名内部类需要实现哪个接口
3、{...}才是匿名内部类的内容

另外还要注意几点问题：
1、匿名内部类在创建对象的时候只能使用唯一的一次。
如果希望多次创建对象，而且类的内容一样的话就必须使用单独定义的实现类了。
2、匿名对象在【调用】方法的时候，只能调用唯一一次。
如果希望同一个对象调用多次方法，那么必须给对象起一个名字。
3、匿名内部类是省略了【实现类/子类名称】，但是匿名对象是省略了【对象名称】
【强调】匿名内部类和匿名对象不是一回事！！！